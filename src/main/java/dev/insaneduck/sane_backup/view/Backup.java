package dev.insaneduck.sane_backup.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Data;

import javax.swing.*;
import java.awt.*;

@Data
public class Backup
{
    private JCheckBox archPackagesCheckBox;
    private JCheckBox archUserRepositoryPackagesCheckBox;
    private JCheckBox flatpakCheckBox;
    private JCheckBox repositoriesCheckBox;
    private JCheckBox homeFolderConfigsCheckBox;
    private JCheckBox fontsCheckBox;
    private JCheckBox cronJobsCheckBox;
    private JCheckBox installedTARSCheckBox;
    private JPanel backupPanel;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        backupPanel = new JPanel();
        backupPanel.setLayout(new GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
        archPackagesCheckBox = new JCheckBox();
        archPackagesCheckBox.setSelected(true);
        archPackagesCheckBox.setText("Arch Packages");
        backupPanel.add(archPackagesCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        archUserRepositoryPackagesCheckBox = new JCheckBox();
        archUserRepositoryPackagesCheckBox.setSelected(true);
        archUserRepositoryPackagesCheckBox.setText("Arch User Repository Packages");
        backupPanel.add(archUserRepositoryPackagesCheckBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        flatpakCheckBox = new JCheckBox();
        flatpakCheckBox.setSelected(true);
        flatpakCheckBox.setText("Flatpak");
        backupPanel.add(flatpakCheckBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        repositoriesCheckBox = new JCheckBox();
        repositoriesCheckBox.setSelected(true);
        repositoriesCheckBox.setText("Repositories");
        backupPanel.add(repositoriesCheckBox, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        homeFolderConfigsCheckBox = new JCheckBox();
        homeFolderConfigsCheckBox.setSelected(true);
        homeFolderConfigsCheckBox.setText("Home Folder Configs");
        backupPanel.add(homeFolderConfigsCheckBox, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fontsCheckBox = new JCheckBox();
        fontsCheckBox.setSelected(true);
        fontsCheckBox.setText("Fonts");
        backupPanel.add(fontsCheckBox, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cronJobsCheckBox = new JCheckBox();
        cronJobsCheckBox.setSelected(true);
        cronJobsCheckBox.setText("Cron jobs");
        backupPanel.add(cronJobsCheckBox, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        installedTARSCheckBox = new JCheckBox();
        installedTARSCheckBox.setSelected(true);
        installedTARSCheckBox.setText("Installed TARS");
        backupPanel.add(installedTARSCheckBox, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        backupPanel.add(spacer1, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        backupPanel.add(spacer2, new GridConstraints(0, 0, 9, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, new Dimension(15, -1), null, new Dimension(15, -1), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {return backupPanel;}

}
